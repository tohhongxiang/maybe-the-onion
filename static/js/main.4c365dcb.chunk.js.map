{"version":3,"sources":["components/Card.jsx","App.js","index.js"],"names":["Card","title","subreddit","link","goToNextQuestion","onAnswer","useState","outcome","setOutcome","handleSelectAnswer","answer","toLowerCase","useEffect","className","onClick","href","target","rel","App","articles","setArticles","isLoading","setIsLoading","currentIndex","setCurrentIndex","onionAfter","setOnionAfter","notTheOnionAfter","setNotTheOnionAfter","fetchAllArticles","useCallback","a","Promise","all","fetchArticles","after","onionArticles","notOnionArticles","prevArticles","shuffle","length","correctAnswers","setCorrectAnswers","totalAnswers","setTotalAnswers","c","style","display","gridTemplateRows","scoreToAdd","params","url","URL","Object","keys","forEach","key","searchParams","append","fetch","then","res","json","data","children","map","permalink","array","temporaryValue","randomIndex","Math","floor","random","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c365dcb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nexport default function Card({ title, subreddit, link, goToNextQuestion, onAnswer }) {\r\n    const [outcome, setOutcome] = useState(null)\r\n    const handleSelectAnswer = (answer) => {\r\n        if (subreddit.toLowerCase() === 'nottheonion' && answer === 'real') {\r\n            onAnswer(1)\r\n            return setOutcome(1)\r\n        }\r\n\r\n        if (subreddit.toLowerCase() === 'theonion' && answer === 'fake') {\r\n            onAnswer(1)\r\n            return setOutcome(1)\r\n        }\r\n\r\n        onAnswer(0)\r\n        return setOutcome(-1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setOutcome(null)\r\n    }, [title, subreddit])\r\n\r\n\r\n    return (\r\n        <div className=\"w-auto flex flex-col justify-center align-center h-full\">\r\n            <div className=\"mb-8 p-4\">\r\n                <h1 className=\"font-sans text-5xl text-center font-semibold\">{title}</h1>\r\n            </div>\r\n            <div className=\"flex flex-col md:flex-row w-3/5 ml-auto mr-auto justify-around\">\r\n                {outcome ? (\r\n                    <div className=\"flex flex-col\">\r\n                        <button className={`p-4 m-4 rounded-lg tracking-wide \r\n                            bg-${outcome === 1 ? 'green' : 'red'}-300 \r\n                            hover:bg-${outcome === 1 ? 'green' : 'red'}-500 \r\n                            border border-gray-200`} onClick={goToNextQuestion}\r\n                        ><strong>{outcome === 1 ? 'Correct' : 'Incorrect'}</strong></button>\r\n                        {link && <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"m-8 hover:underline\"><em>Link to reddit article</em></a>}\r\n                    </div>\r\n                ) :\r\n                    <>\r\n                        <button className=\"p-4 m-4 rounded-lg tracking-wide bg-red-300 hover:bg-red-500 border border-gray-200\" onClick={() => handleSelectAnswer('fake')}><strong>Fake news</strong></button>\r\n                        <button className=\"p-4 m-4 rounded-lg tracking-wide bg-green-300 hover:bg-green-500 border border-gray-200\" onClick={() => handleSelectAnswer('real')}><strong>Real news</strong></button>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\nimport Card from './components/Card'\n\nfunction App() {\n\tconst [articles, setArticles] = useState([])\n\tconst [isLoading, setIsLoading] = useState(false)\n\tconst [currentIndex, setCurrentIndex] = useState(0)\n\n\tconst [onionAfter, setOnionAfter] = useState('')\n\tconst [notTheOnionAfter, setNotTheOnionAfter] = useState('')\n\n\tconst fetchAllArticles = useCallback(async (onionAfter = '', notTheOnionAfter = '') => {\n\t\tsetIsLoading(true)\n\t\tconst [onionArticles, notOnionArticles] = await Promise.all([fetchArticles('TheOnion', { after: onionAfter }), fetchArticles('NotTheOnion', { after: notTheOnionAfter })])\n\t\tsetIsLoading(false)\n\n\t\tsetArticles(prevArticles => [\n\t\t\t...prevArticles,\n\t\t\t...shuffle([...onionArticles.articles, ...notOnionArticles.articles])\n\t\t])\n \n\t\tsetOnionAfter(onionArticles.after)\n\t\tsetNotTheOnionAfter(notTheOnionAfter.after)\n\t}, [])\n\n\tuseEffect(() => {\n\t\tfetchAllArticles()\n\t}, [fetchAllArticles])\n\n\tuseEffect(() => {\n\t\tif (currentIndex > articles.length - 1) {\n\t\t\tfetchAllArticles(onionAfter, notTheOnionAfter)\n\t\t}\n\t}, [fetchAllArticles, currentIndex, articles.length, onionAfter, notTheOnionAfter])\n\n\tconst [correctAnswers, setCorrectAnswers] = useState(0)\n\tconst [totalAnswers, setTotalAnswers] = useState(0)\n\tconst handleAnswer = (scoreToAdd) => {\n\t\tsetCorrectAnswers(c => c + scoreToAdd)\n\t\tsetTotalAnswers(c => c + 1)\n\t}\n\n\tconst goToNextQuestion = () => {\n\t\tsetCurrentIndex(c => c + 1)\n\t}\n\n\treturn (\n\t\t<div className=\"App h-screen\" style={{ display: 'grid', gridTemplateRows: '1fr auto' }}>\n\t\t\t{isLoading ? <p className=\"text-center m-12 font-semibold\">Loading...</p> : articles[currentIndex] && <Card {...articles[currentIndex]} onAnswer={handleAnswer} goToNextQuestion={goToNextQuestion} />}\n\t\t\t<div className=\"flex justify-between items-center pl-4 pr-4\">\n\t\t\t\t<h2 className=\"font-bold text-2xl\">{correctAnswers}/{totalAnswers}</h2>\n\t\t\t\t<button className=\"p-4 m-4 rounded-lg tracking-wide bg-blue-300 hover:bg-blue-500 border border-gray-200\" onClick={goToNextQuestion}>></button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\nasync function fetchArticles(subreddit, params = {}) {\n\tconst url = new URL(`https://www.reddit.com/r/${subreddit}.json`)\n\tObject.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n\treturn fetch(url).then(res => res.json())\n\t\t.then(({ data }) => ({\n\t\t\tafter: data.after,\n\t\t\tarticles: data.children.map(({ data }) => ({\n\t\t\t\ttitle: data.title,\n\t\t\t\tlink: 'https://www.reddit.com' + data.permalink,\n\t\t\t\tsubreddit: data.subreddit\n\t\t\t}))\n\t\t}))\n}\n\nfunction shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}